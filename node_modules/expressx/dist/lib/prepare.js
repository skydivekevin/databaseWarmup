'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = prepare;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _i18n = require('i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _expressHbs = require('express-hbs');

var _expressHbs2 = _interopRequireDefault(_expressHbs);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _cookieParser = require('cookie-parser');

var _cookieParser2 = _interopRequireDefault(_cookieParser);

var _compression = require('compression');

var _compression2 = _interopRequireDefault(_compression);

var _helmet = require('helmet');

var _helmet2 = _interopRequireDefault(_helmet);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackDevMiddleware = require('webpack-dev-middleware');

var _webpackDevMiddleware2 = _interopRequireDefault(_webpackDevMiddleware);

var _webpackHotMiddleware = require('webpack-hot-middleware');

var _webpackHotMiddleware2 = _interopRequireDefault(_webpackHotMiddleware);

var _webpack3 = require('./webpack');

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cwd = process.cwd();
var webpackCompiler = (0, _webpack2.default)(_webpack3.webpackConfig);

/**
 * Set up an actual express app
 *
 * @export
 * @param {any} appInitializer - User's Express setup
 * @returns
 */
function prepare(appInitializer, testSetup) {
	var app = (0, _express2.default)();
	if (!testSetup) {
		_fsExtra2.default.ensureDirSync('.expressx/build/' + _config2.default.staticFolder);
	}

	// Set up i18n
	_i18n2.default.configure(_extends({}, _config2.default.i18n, {
		directory: _path2.default.join(cwd, _config2.default.i18n.path)
	}));

	// Handlebars
	app.engine('hbs', _expressHbs2.default.express4({
		partialsDir: _path2.default.join(cwd, _config2.default.hbs.partials),
		layoutsDir: _path2.default.join(cwd, _config2.default.hbs.layouts),
		defaultLayout: _path2.default.join(cwd, _config2.default.hbs.defaultLayout),
		i18n: _i18n2.default
	}));
	app.set('views', _path2.default.join(cwd, _config2.default.hbs.views));
	app.set('view engine', 'hbs');

	// Helmet for security
	app.use((0, _helmet2.default)(_config2.default.helmet));
	// Shameless branding. Users should disable this
	if (_config2.default.poweredByHeader) {
		app.use(function (req, res, next) {
			res.setHeader('X-Powered-By', _config2.default.poweredByHeader);
			next();
		});
	}
	// Boilerplate stuff
	app.use(_bodyParser2.default.json());
	app.use(_bodyParser2.default.urlencoded({ extended: false }));
	app.use((0, _cookieParser2.default)());
	app.use(_express2.default.static(_path2.default.join(cwd, '.expressx/build/' + _config2.default.staticFolder)));
	app.use(_i18n2.default.init);
	app.use((0, _compression2.default)());

	// Webpack middleware in development if selected
	if (process.env.NODE_ENV !== 'production' && _config2.default.webpackMode === 'middleware') {
		app.use((0, _webpackDevMiddleware2.default)(webpackCompiler, _config2.default.webpackDevMiddleware));
		app.use((0, _webpackHotMiddleware2.default)(webpackCompiler));
	}

	// Now it's time to bring in user's config
	app = appInitializer(app);

	// @TODO Cool error handling
	if (_config2.default.errorHandling) {
		app.use(function (req, res, next) {
			var err = new Error('Not Found');
			err.status = 404;
			next(err);
		});

		// error handler
		app.use(function (err, req, res) {
			// set locals, only providing error in development
			res.locals.message = err.message;
			res.locals.error = req.app.get('env') === 'development' ? err : {};

			// render the error page
			res.status(err.status || 500);
			res.render('error');
		});
	}

	return app;
}