'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = transpile;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _core = require('@babel/core');

var babel = _interopRequireWildcard(_core);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Transpile file with Babel
 *
 * @export
 * @param {string} file - File path
 * @param {boolean} initial - Initial transpilation flag
 * @returns {Promise}
 */
function transpile(file, initial) {
	return new Promise(function (resolve, reject) {
		var cwd = process.cwd();
		var filename = file.replace(cwd, '');
		// Show spinner on non-initial transpiles
		var spinner = initial ? null : (0, _ora2.default)('Processing ' + filename).start();

		babel.transformFile(file, _config2.default.babel, async function (err, result) {
			if (err) {
				if (!initial) spinner.stop();
				reject(err);
			} else {
				var pathArray = file.split('/');
				pathArray.pop();
				var fileDir = pathArray.join('/').replace(cwd, '');

				await _fsExtra2.default.ensureDir(cwd + '/.expressx/build/' + fileDir);
				await _fsExtra2.default.writeFile(cwd + '/.expressx/build/' + file.replace(cwd, ''), result.code);
				if (!initial) spinner.stop();

				resolve();
			}
		});
	});
}