'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.webpackConfig = undefined;
exports.default = webpack;

var _path = require('path');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dev = process.env.NODE_ENV !== 'production';
var cwd = process.cwd();

var defaultWebpackConfig = {
	context: cwd,
	devtool: dev ? 'inline-sourcemap' : false,
	mode: dev ? 'development' : 'production',
	entry: {
		app: './public/js/app.js'
	},
	resolve: {
		extensions: ['.js', '.jsx']
	},
	resolveLoader: {
		alias: {
			'babel-loader': require.resolve('babel-loader')
		}
	},
	module: {
		rules: [{
			test: /\.jsx?$/,
			exclude: /(node_modules|bower_components)/,
			loader: 'babel-loader',
			query: {
				presets: [(0, _path.join)(__dirname, '../../babel/client.js')]
			}
		}]
	},
	output: {
		path: (0, _path.join)(cwd, '.expressx/build/public/js'),
		filename: '[name].min.js'
	},
	plugins: dev ? [new _webpack2.default.HotModuleReplacementPlugin()] : [new _webpack2.default.optimize.AggressiveMergingPlugin()]
};

var webpackConfig = _config2.default.webpack(defaultWebpackConfig);

exports.webpackConfig = webpackConfig;
function webpack() {
	return new Promise(async function (resolve, reject) {
		await _fsExtra2.default.ensureDir(webpackConfig.output.path);
		(0, _webpack2.default)(webpackConfig, function (err, stats) {
			if (err || stats.hasErrors()) {
				reject(err || stats.toJson());
			}
			resolve({
				hash: stats.hash,
				time: stats.endTime - stats.startTime
			});
		});
	});
}