'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _path = require('path');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _autoprefixer = require('autoprefixer');

var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

var _postcssSass = require('@csstools/postcss-sass');

var _postcssSass2 = _interopRequireDefault(_postcssSass);

var _postcssScss = require('postcss-scss');

var _postcssScss2 = _interopRequireDefault(_postcssScss);

var _cssnano = require('cssnano');

var _cssnano2 = _interopRequireDefault(_cssnano);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cwd = process.cwd();

/**
 * Compile SASS to CSS
 *
 * @export
 */

exports.default = async function postcss() {
	return new Promise(async function (resolve, reject) {
		var spinner = (0, _ora2.default)('Processing styles').start();
		var processors = [_postcssSass2.default, (0, _autoprefixer2.default)(_config2.default.autoprefixer)];

		// Minify in production
		if (process.env.NODE_ENV === 'production') {
			processors.push(_cssnano2.default);
		}

		// Process all files
		await Promise.all(_config2.default.styles.map(async function (cssPath) {
			try {
				var css = await _fsExtra2.default.readFile((0, _path.join)(cwd, cssPath));
				var folder = cssPath.split('/');
				var filename = folder.pop();

				var outPath = void 0;

				if (_config2.default.stylesOut) {
					await _fsExtra2.default.ensureDir('.expressx/build/' + _config2.default.stylesOut);
					outPath = _config2.default.stylesOut + '/' + filename.replace('.scss', '.css');
				} else {
					await _fsExtra2.default.ensureDir('.expressx/build/' + folder.join('/'));
					outPath = cssPath.replace('.scss', '.css');
				}

				var result = await (0, _postcss2.default)(processors).process(css, {
					from: (0, _path.join)(cwd, cssPath),
					to: (0, _path.join)(cwd, '.expressx/build/' + outPath),
					syntax: _postcssScss2.default
				});

				await _fsExtra2.default.writeFile((0, _path.join)(cwd, '.expressx/build/' + outPath), result.css);
				// Write source map in development
				if (result.map && process.env.NODE_ENV !== 'production') {
					await _fsExtra2.default.writeFile((0, _path.join)(cwd, '.expressx/build/' + outPath + '.map'), result.map);
				}
			} catch (e) {
				spinner.stop();
				reject(e);
			}
		}));

		// We're done, stop the spinner
		spinner.stop();
		resolve();
	});
};