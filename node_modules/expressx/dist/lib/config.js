'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _path = require('path');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _invariant = require('fbjs/lib/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable global-require, import/no-dynamic-require, security/detect-non-literal-require */

var cwd = process.cwd();
var userConfigPath = (0, _path.join)(cwd, 'expressx.config.js');

// Standard config that can be extended
var defaultConfig = {
	babel: {
		ignore: [],
		sourceMaps: 'inline',
		babelrc: false,
		presets: [(0, _path.join)(__dirname, '../../babel/server')]
	},
	babelIncludeWebpackPaths: false,
	http2: false, // { key, cert }
	port: 3000,
	poweredByHeader: 'ExpressX',
	errorHandling: true,
	i18n: {
		locales: ['en'],
		cookie: 'locale',
		path: 'locales',
		objectNotation: true
	},
	hbs: {
		views: 'views',
		partials: 'views/partials',
		layouts: 'views/layouts',
		defaultLayout: 'views/layouts/default'
	},
	staticFolder: 'public',
	autoprefixer: {
		grid: true,
		map: true
	},
	helmet: null, // helmet options
	styles: ['public/styles/styles.scss'],
	webpackMode: 'direct',
	webpack: function webpack(config) {
		return config;
	},
	webpackDevMiddleware: {
		publicPath: '/js/'
	},
	disableWebpack: false,
	watchmanIgnore: []
};

/**
 * Make sure everything is what it's supposed to be
 *
 * @param {any} config - ExpressX config
 */
function validateConfig(config) {
	var webpackMode = config.webpackMode,
	    poweredByHeader = config.poweredByHeader,
	    webpack = config.webpack,
	    webpackDevMiddleware = config.webpackDevMiddleware,
	    port = config.port,
	    styles = config.styles,
	    babel = config.babel;

	(0, _invariant2.default)(webpackMode === 'middleware' || webpackMode === 'direct', 'Unknown Webpack mode "%s". Supported modes are "direct" and "middleware"', webpackMode);
	(0, _invariant2.default)(typeof poweredByHeader !== 'function' && typeof poweredByHeader !== 'number', "poweredByHeader can't be set to %s", typeof poweredByHeader === 'undefined' ? 'undefined' : _typeof(poweredByHeader));
	(0, _invariant2.default)(typeof webpack === 'function', 'Webpack config must be a function');
	(0, _invariant2.default)(typeof webpackDevMiddleware.publicPath === 'string', '"publicPath" option is required for webpack-dev-middleware');
	(0, _invariant2.default)(typeof port === 'number' || typeof port === 'string', 'Invalid type "%s" for "port"', typeof port === 'undefined' ? 'undefined' : _typeof(port));
	(0, _invariant2.default)(Array.isArray(styles), '"styles" must be an array of path strings');
	if (babel && babel.ignore) {
		(0, _invariant2.default)(Array.isArray(babel.ignore), 'Please specify Babel ignore paths as an array of globs');
	}
}

// Merge default config and user config
function buildConfig() {
	var userConfig = _fsExtra2.default.existsSync(userConfigPath) ? require(userConfigPath) : {};
	var configFields = Object.keys(userConfig);

	if (configFields.length > 0) {
		console.log(_chalk2.default.grey('> Using config in ' + _chalk2.default.bold('express.config.js') + '. Fields: ' + _chalk2.default.bold(configFields.join(', '))));
	}

	var config = _extends({}, defaultConfig, userConfig);

	// Validate
	validateConfig(config);

	return config;
}

var config = buildConfig();

exports.default = config;